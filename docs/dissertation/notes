Two events:
 - begin
 - until

Both types of conditionals. Presumed that previous steps of the recipe ensure that the
conditions to start a recipe are met e.g. leave to marinate for 2 hours.

Conditionals allow us to mix until "mixed". The concrete implementation can then be used
to link this to a signal from a camera in the case of a robot (or some other decision
logic).

For time keeping it is probably best to have a global clock so that timings for each
station can still be compared.

- Merge topological sorting with new station/action system
- QuickSpec
- Equivalence?
- Ways to chop etc.
- Different ways to combine
- Transformations e.g. whisk egg or blend fruit
- Grouping during scheduling e.g. two seperate parts of the recipe use a slice of toast
then we can group that to cook 2 slices of toast at once (potentially).
- Expandability, new combinators (already possible), new measurements / transformations.
- Give things a nicer name e.g. special heatTo combinator instead of: conditional CondTemp
- Tools for performing actions e.g. spoon / measuring jug / knife

-----------------------
Temporary / Removeable Recipes e.g. Bay Leaf

Mark recipe as removeable.
Remove later.
Remove presumes a corresponding removeable was already added.
Or specify when to remove as a conditional.
-----------------------

-----------------------
Scheduling / Actions:

Can allocate parts of recipe to stations then translate into appropriate actions.
This creates a schedule where each station has its set of actions running in parallel.
Need to schedule movement between stations.

- Interactions between stations e.g. stirring while in pan.
-----------------------

-----------------------
Measuring:

Default measurements on ingredients or have measurement in ingredient constructor?

"To taste" measurement.
-----------------------

-----------------------
Do For vs Do then Wait for
Heat to / for vs Heat at (maybe both)

Do for and heat to / for -> wrap recipe in conditional
Heat combinator becomes HeatAt
Wait takes a recipe
Sequencing is removed

HeatAt then needs to be able to take void for temp

Unless we have a generic Heat combinator
Heat "Nothing" with a Condition of the preheat temp
then combine that with the recipe we want to heatAt
that temp.

It may then seem intuitive to model Wait as a combination
of a void recipe wrapped in a time condition and the
recipe we want to wait after except that there is
nothing that would prevent the recipe from being executed
after the wait rather than before since dependency is
indicated by the parent node being dependent on its child nodes.

Maybe we don't need a special combinator. Ovens have
a large range of heat settings, hobs have fewer however,
we could consider a kettle being ON to be a single heat setting.

In which case we can add "on" or something similar as a 
valid temperature. But we might not even need to.
A toaster cooks toast when it's "on" but the temperature
could still be measured in other ways. It turns out it is
over 600C. You could toast bread in a pan at a lower
temperature but it would take longer.
-----------------------

-----------------------
Wrap in transaction

Issue with wrap in transaction:
forces everything below in tree to become wrapped,
could add number of previous steps to wrap (not particularly nice).

Could only wrap immediate children, could chain transactions

Transaction means perform r immediately after direct dependencies
are completed.

For combine, might only care about performing immediately after
one of the dependencies. Adding this could be messy,
having a more basic transaction type only results in a slight
loss of flexibility in scheduling.
-----------------------